. env.sh
# export VAULT_TOKEN=$(grep 'Initial Root Token:' /tmp/shamir-1.txt | awk '{print $NF}')
# export VAULT_TOKEN=${VAULT_TOKEN:-'root'}

tput clear
cyan "#-------------------------------------------------------------------------------
#--- Running: $0: SENTINEL
#-------------------------------------------------------------------------------\n"

tput clear
cyan "#-------------------------------------------------------------------------------
# CREATE AN EGP POLICY NAMED: cidr-check.
#-------------------------------------------------------------------------------\n"

green "Create/get sentinel policy"
# wget -P ./vault/files https://raw.githubusercontent.com/hashicorp/vault-guides/master/governance/validation-policies/cidr-check.sentinel

tee ./vault/files/cidr-check.sentinel <<EOF
# dynamically generated by script: $0
import "sockaddr"
import "strings"

# Only care about create, update, and delete operations against secret path
#--- Uncomment if you want to add precond
precond = rule {
    request.operation in ["create", "update", "delete"] and
    strings.has_prefix(request.path, "labsecrets/")
}

# Requests to come only from our private IP range
cidrcheck = rule {
    sockaddr.is_contained(request.connection.remote_addr, "122.22.3.4/32")
}

# Check the precondition before execute the cidrcheck
main = rule {
    cidrcheck
}
# #--- Uncomment if you want to add precond
# main = rule when precond {
#     cidrcheck
# }
EOF
p "Press Enter to continue..."

green "#--- Store the Base64 encoded cidr-check.sentinel policy in an environment 
variable named POLICY."
pe 'POLICY=$(base64 ./vault/files/cidr-check.sentinel)'

green "#--- Create a policy cidr-check with enforcement level of hard-mandatory to 
reject all requests coming from IP addressed that are not internal."

pe 'vault write sys/policies/egp/cidr-check \
        policy="${POLICY}" \
        paths="labsecrets/*" \
        enforcement_level="hard-mandatory"'

green "#--- Read the policy:"
pe "vault read sys/policies/egp/cidr-check"
p "Press Enter to continue..."


tput clear
cyan "#-------------------------------------------------------------------------------
# CREATE AN EGP POLICY NAMED: business-hrs.
#-------------------------------------------------------------------------------\n"

green "#--- Create sentinel policy for business-hrs"
p "Press Enter to continue..."

tee ./vault/files/business-hrs.sentinel <<EOF
# dynamically generated by script: $0
import "time"

# We expect requests to only happen during work days (0 for Sunday, 6 for Saturday)
workdays = rule {
    time.now.weekday > 0 and time.now.weekday < 6 
}

# We expect requests to only happen during work hours
workhours = rule {
    time.now.hour > 7 and time.now.hour < 18 
}

main = rule {
    workdays and workhours
}
EOF

echo
green "#--- Encode the business-hrs policy"
POLICY2=$(base64 ./vault/files/business-hrs.sentinel)

green "#--- Create a policy with soft-mandatory enforcement-level"
vault write sys/policies/egp/business-hrs \
        policy="${POLICY2}" \
        paths="labsecrets/labaccounting/*" \
        enforcement_level="soft-mandatory"

green "#--- To read the policy you just created"
pe "vault read sys/policies/egp/business-hrs"
p "Press Enter to continue..."


tput clear
cyan "#-------------------------------------------------------------------------------
# SENTINEL - VERIFICATION
#-------------------------------------------------------------------------------\n"

green "Once the policies were deployed, create, update and delete operations coming 
from an IP address other than 122.22.3.4 will be denied."
vault auth enable userpass
unset VAULT_TOKEN
pe 'vault write auth/userpass/users/bunsen password="honeydew" policies="base"'
pe "vault login -method=userpass username=bunsen password=honeydew"
green "#--- Go to a denied path"
pe 'vault kv put labsecrets/accounting/test acct_no="293472309423"'

green "#--- Go to allowed path but from an unapproved IP"
pe 'vault kv put labsecrets/labaccounting/test acct_no="293472309423"'

yellow "Should Fail - Permission denied 
Why? Our IP is 10.0.10.1. See audit logs. Policy only allows 122.22.3.4
"

green "#--- You will also get an error if any request is made outside of the 
business hours defined by the business-hrs policy."

echo
yellow "WARNING: As with ACL policies, root tokens are NOT subject to Sentinel 
policy checks. Therefore, use a non-root token for verification test."

echo
green "#--- Change the sentinel policy to allow your IP"
# vault login $(consul kv get service/vault/root-token)
# sed -i -e '/remote_addr/ s/122.22.3.4/10.0.10.1/' ./vault/files/cidr-check.sentinel
# # sed -i -e '/remote_addr/ s/10.0.10.1/122.22.3.4/' ./vault/files/cidr-check.sentinel
# pe 'POLICY=$(base64 ./vault/files/cidr-check.sentinel)'
# vault write sys/policies/egp/cidr-check \
#         policy="${POLICY}" \
#         paths="labsecrets/*" \
#         enforcement_level="hard-mandatory"
# or from the GUI
pe "open http://localhost:10101/ui/vault/policy/egp/cidr-check"
p "Press Enter to continue..."


pe "vault login -method=userpass username=bunsen password=honeydew | grep token"

green "#--- Go to allowed path, from an approved IP"
pe 'vault kv put labsecrets/labaccounting/test acct_no="293472309423"'
p "Press Enter to continue..."


tput clear
cyan "#-------------------------------------------------------------------------------
# CREATE AN EGP POLICY NAMED: validate-aws-keys
#-------------------------------------------------------------------------------\n"

wget -P ./vault/files https://raw.githubusercontent.com/hashicorp/vault-guides/master/governance/validation-policies/validate-aws-keys.sentinel
green "#--- Encode the validate-aws-keys policy"
pe 'POLICY3=$(base64 ./vault/files/validate-aws-keys.sentinel)'

green "#--- Create a policy with soft-mandatory enforcement-level"
vault login $(consul kv get service/vault/root-token) 
pe 'vault write sys/policies/egp/validate-aws-keys \
        policy="${POLICY3}" \
        paths="*" \
        enforcement_level="soft-mandatory"'

green "#--- Read the policy you just created"
pe "vault read sys/policies/egp/validate-aws-keys"
p "Press Enter to continue..."


tput clear
cyan "#-------------------------------------------------------------------------------
# SENTINEL - VERIFICATION: validate-aws-keys
#-------------------------------------------------------------------------------\n"

cyan "Test the validate-aws-keys policy with the Vault CLI by trying to write secrets 
with AWS keys that do and do not conform with the policy. 

Normally, you would be writing secrets to paths like "aws/config/root" for the 
AWS secrets engine or "auth/aws/config/client" for the AWS auth method. 
But we will use other paths below."

unset VAULT_TOKEN
# pe 'vault write auth/userpass/users/bunsen password="honeydew" policies="base"'
pe "vault login -method=userpass username=bunsen password=honeydew"

green "#--- Try to write some valid AWS keys with a command like "
pe "vault kv put labsecrets/aws/config/root access_key=AAAAABBBBBCCCCCDDDDD \
    secret_key=AAAAABBBBBCCCCCDDDDDAAAAABBBBBCCCCCDDDDD"
yellow "This should return "Success! Data written to: kv/aws/config/root" since the keys are valid."
p "Press Enter to continue..."


tput clear
red "#--- NEGATIVE TESTING"
echo

green "#--- Try to write invalid AWS keys that are too short"
pe "vault kv put labsecrets/aws/config/root access_key=AAAAA secret_key=AAAAA"

yellow 'This should return a long error message including a description of the 
Sentinel policy that failed, the path you tried to write to, kv/aws/config/root, 
the request data, and the messages "Invalid AWS access key" and 
"Invalid AWS secret key" which is printed by the policy whenever the keys are invalid.'

echo
green "#--- Try to write invalid AWS keys with invalid characters 
(only A-Z and 0-9 are allowed for access_key)"
pe "vault kv put labsecrets/aws/config/root access_key=AAAAABBBBBCCCCCddddd \
    secret_key=AAAAABBBBBCCCCCDDDDDAAAAABBBBBCCCCCDDDDD"

echo
green "#--- Try to write invalid AWS keys with invalid characters with policy-override"
pe "vault kv put labsecrets/aws/config/root access_key=AAAAABBBBBCCCCCddddd \
    secret_key=AAAAABBBBBCCCCCDDDDDAAAAABBBBBCCCCCDDDDD"
